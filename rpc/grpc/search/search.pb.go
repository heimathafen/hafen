// Code generated by protoc-gen-go.
// source: rpc/grpc/search/search.proto
// DO NOT EDIT!

/*
Package search is a generated protocol buffer package.

It is generated from these files:
	rpc/grpc/search/search.proto

It has these top-level messages:
	SearchRequest
	Results
*/
package search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import recipe "github.com/heimathafen/hafen/proto/recipe"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SearchRequest represents a search query.
type SearchRequest struct {
	// full-text query to search for a recipe
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}

// Results represent recipes matching the query.
type Results struct {
	// list of recipes matching the query
	Recipes []*recipe.Recipe `protobuf:"bytes,1,rep,name=recipes" json:"recipes,omitempty"`
}

func (m *Results) Reset()         { *m = Results{} }
func (m *Results) String() string { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()    {}

func (m *Results) GetRecipes() []*recipe.Recipe {
	if m != nil {
		return m.Recipes
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Search service

type SearchClient interface {
	Call(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Results, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Call(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Results, error) {
	out := new(Results)
	err := grpc.Invoke(ctx, "/search.Search/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Search service

type SearchServer interface {
	Call(context.Context, *SearchRequest) (*Results, error)
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_Call_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SearchRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(SearchServer).Call(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Search_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
